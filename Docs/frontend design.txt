PartyHub: Frontend Detailed Design (React)
1. Project Structure
The project will use a feature-based structure that groups components, hooks, and types related to a specific domain. This approach scales better than grouping by file type (e.g., all components in one folder).
Generated code
     /partyhub-frontend
|
├── src/
│   ├── assets/                // Images, fonts, SVG icons
│   │
│   ├── components/            // Global, reusable UI components
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   ├── Input.tsx
│   │   ├── Spinner.tsx
│   │   └── QRCode.tsx
│   │
│   ├── game/                  // Components specific to each mini-game
│   │   ├── QuizClash/
│   │   │   ├── QuizClashHostView.tsx
│   │   │   └── QuizClashPlayerView.tsx
│   │   ├── FibFinders/
│   │   │   ├── FibFindersHostView.tsx
│   │   │   └── FibFindersPlayerView.tsx
│   │   └── GameContainer.tsx    // Dynamically renders the correct game view
│   │
│   ├── hooks/                 // Custom React hooks
│   │   └── usePlayerRole.ts     // e.g., returns { isHost, isPlayer }
│   │
│   ├── pages/                 // Top-level page components for routing
│   │   ├── HomePage.tsx
│   │   ├── LobbyPage.tsx
│   │   └── GamePage.tsx
│   │
│   ├── services/
│   │   └── SocketService.ts     // Manages all Socket.IO communication
│   │
│   ├── store/                 // Global state management (Zustand)
│   │   ├── playerStore.ts
│   │   ├── roomStore.ts
│   │   └── gameStore.ts
│   │
│   ├── types/
│   │   └── index.ts             // All shared TypeScript interfaces and enums
│   │
│   ├── App.tsx                  // Main component with router setup
│   └── index.tsx                // Application entry point
│
├── package.json
└── tsconfig.json

   

2. State Management (Zustand)
We will use Zustand for global state management due to its simplicity, minimal boilerplate, and hook-based API. The state will be split into logical stores.
playerStore.ts
Manages information about the current user's session.
State:
socketId: string | null
nickname: string | null
isConnected: boolean


Actions:
setConnectionState(isConnected, socketId)
setNickname(nickname)


roomStore.ts
Manages the state of the room itself.
State:
roomCode: string | null
hostId: string | null
players: Player[]


Actions:
setRoom(roomData): Replaces the entire room state. Used by room:update events.


gameStore.ts
Manages the state of the currently active game.
State:
gameState: GameState | null: This will hold the entire game:state_update payload from the server.


Actions:
setGameState(gameState)
clearGameState(): Resets the state when a game ends.



3. Core Components & Pages
HomePage.tsx
Purpose: The application's entry point.
UI: Displays two main sections:
A "Create Room" button.
A form with a text input for roomCode and a "Join Room" button.


Logic:
On "Create Room" click, it calls an action that emits the corresponding event via SocketService and navigates to the lobby.
On "Join Room" submit, it calls SocketService.joinRoom(...) and navigates to the lobby.


LobbyPage.tsx
Purpose: The waiting area before a game starts.
Logic:
Subscribes to roomStore to get the list of players and the host ID.
Uses a custom hook usePlayerRole() to determine if the current user is the host (usePlayerRole() checks if playerStore.socketId === roomStore.hostId).


Conditional UI (isHost vs. isPlayer):
Host View:
Displays the roomCode in a large font.
Renders the <QRCode /> component with the room join URL.
Maps over roomStore.players to show a list of connected players.
Displays a "Start Game" button (which might open a modal to select a game from a list).


Player View:
Displays a "You're in!" message.
Shows the list of other players.
Shows a "waiting for host to start" message.




GamePage.tsx
Purpose: The main view during gameplay.
Logic:
This component acts as a router or container for the specific game being played.
It subscribes to the gameStore.
It reads gameStore.gameState.gameId (e.g., "quizclash").
It uses this ID to dynamically render the correct game component via <GameContainer />.


GameContainer.tsx
Purpose: Selects the correct game view to render.
Logic:
Receives gameState as a prop.
Uses the usePlayerRole() hook to determine if the user is the host or a player.
A switch statement (or a map object) determines which component to render.


Generated typescript
     // src/game/GameContainer.tsx

const GameContainer = () => {
  const gameState = useGameStore(state => state.gameState);
  const { isHost } = usePlayerRole();

  if (!gameState) return <Spinner />;

  switch (gameState.gameId) {
    case 'quizclash':
      return isHost ? <QuizClashHostView /> : <QuizClashPlayerView />;
    case 'fibfinders':
      return isHost ? <FibFindersHostView /> : <FibFindersPlayerView />;
    default:
      return <p>Error: Unknown game type!</p>;
  }
};
   
IGNORE_WHEN_COPYING_START
content_copy download
Use code with caution. TypeScript
IGNORE_WHEN_COPYING_END

4. Communication Layer
SocketService.ts
This module is the single point of contact with the backend. It abstracts all Socket.IO logic away from the UI components.
Implementation: A singleton class or a plain object module.
Responsibilities:
Connection Management:
connect(): Initializes the socket.io-client connection. Called once when the app loads.


Event Listeners (Subscribing to Backend Events):
Sets up listeners for all server-to-client events (room:update, game:state_update, error).
When an event is received, it calls the appropriate action from the Zustand stores to update the global state. Components do not listen to socket events directly.


Emitters (Sending Events to Backend):
Provides well-typed, high-level methods for components to call.




Generated typescript
     // src/services/SocketService.ts
import { io, Socket } from 'socket.io-client';
import { usePlayerStore, useRoomStore, useGameStore } from '../store';

class SocketService {
  private socket: Socket;

  connect() {
    this.socket = io('BACKEND_URL');

    // Setup global listeners that update the stores
    this.socket.on('connect', () => {
      usePlayerStore.getState().setConnectionState(true, this.socket.id);
    });

    this.socket.on('room:update', (data) => {
      useRoomStore.getState().setRoom(data);
    });

    this.socket.on('game:state_update', (data) => {
      useGameStore.getState().setGameState(data);
    });
  }

  // --- Emitters ---
  public createRoom(callback: (response: any) => void) {
    // Using Express/REST for this one-off action
    fetch('/api/rooms', { method: 'POST' }).then(res => res.json()).then(callback);
  }

  public joinRoom(roomCode: string, nickname: string) {
    this.socket.emit('room:join', { roomCode, nickname });
  }

  public sendPlayerAction(action: any) {
    this.socket.emit('player:action', { action });
  }
}

export const socketService = new SocketService();
   
IGNORE_WHEN_COPYING_START
content_copy download
Use code with caution. TypeScript
IGNORE_WHEN_COPYING_END

5. Data Flow Example: Player Joins a Room
User Action: On HomePage.tsx, the user enters "WXYZ" and "Bob", then clicks "Join".
Component Event Handler: The onClick handler calls socketService.joinRoom('WXYZ', 'Bob').
Navigation: The app uses a router (e.g., React Router) to navigate to /lobby/WXYZ.
Service Layer: SocketService emits the room:join event to the backend.
Backend Response: The backend processes the join request and broadcasts a room:update event to all clients in that room.
Service Layer Listener: The SocketService instance in every client's browser receives the room:update event. The listener fires.
State Update: The listener's callback, useRoomStore.getState().setRoom(data), is executed. This updates the global roomStore with the new list of players.
UI Re-render: The LobbyPage.tsx component is subscribed to useRoomStore. Zustand detects the change and triggers a re-render. Bob's name now appears in the player list on everyone's screen.

