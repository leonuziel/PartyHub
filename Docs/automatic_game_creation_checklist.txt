# Checklist for Enabling Automatic Game Creation

This document outlines the necessary changes and improvements to transition PartyHub from a system with hardcoded games to a platform where games can be created dynamically through a user interface.

The strategy outlined here is a **cautious, parallel approach**. The new config-driven system will be built alongside the existing game system, allowing for development and testing without disrupting the current functionality.

The core idea is to move from game logic defined in code (`FakeNewsGame.ts`, `QuizClashGame.ts`) to game logic defined in a configuration file (e.g., a JSON file). The application will then read this configuration to run the game.

---

## I. Core Architectural Changes: The Game Configuration Model

This is the most critical part of the transition. We need a standardized structure to define a game. This "Game Configuration" will be the source of truth for both the backend and frontend.

- [✅] **Define the Game Configuration Schema:**
  -   **Objective:** Create a comprehensive JSON schema that can describe any game. This schema is the contract between the frontend game creator and the backend game runner.
  -   **Key Sections:**
    -   `metadata`: `gameId`, `title`, `description`, `minPlayers`, `maxPlayers`, `artworkUrl`.
    -   `states`: An object defining all possible game states (e.g., `STARTING`, `WRITING_PROMPTS`, `VOTING`, `REVEAL`, `FINISHED`).
    -   `initialState`: The first state the game enters when it starts.
    -   `playerAttributes`: Define data fields stored per player (e.g., `score`, `currentAnswer`, `isReady`).
    -   `actions`: A list of all possible actions players or the host can take (e.g., `submitAnswer`, `startGame`, `nextRound`). Each action should specify who can trigger it (host, player, or server-timer).
    -   `transitions`: The state machine logic. Defines how the game moves from one state to another, triggered by `actions`. E.g., On `VOTING` state, the `timerExpires` action transitions the game to the `REVEAL` state.
    -   `ui`: Defines the user interface for each state for both the host and the players. This is the "drag and drop" part.

---

## II. Backend Changes

The backend must evolve from running game-specific classes to running a generic game engine that interprets the new Game Configuration.

- [✅] **Create a `ConfigurableGame.ts` Engine:**
  -   **Objective:** Create a new, generic game engine that runs games based on a configuration file, while leaving the existing `BaseGame.ts` untouched.
  -   **Action:** Create a new file, `Server/src/game/games/ConfigurableGame.ts`. This class will **extend `BaseGame.ts`**. Its constructor will accept a Game Configuration object, and its methods (`handleAction`, `getState`, etc.) will interpret the config's `states`, `actions`, and `transitions` to manage the game flow. This preserves the existing game structure.

- [✅] **Update `GameFactory.ts` to be Dual-System Aware:**
  -   **Objective:** Modify the `GameFactory` to handle both the old hardcoded games and the new config-driven games simultaneously.
  -   **Action:** The `createGame(gameId, players, hostId)` method will be updated. It will first check if the `gameId` corresponds to a Game Configuration (e.g., by checking the new Game Configuration API).
    -   If it is a config-based game, it will instantiate `ConfigurableGame` with the fetched config.
    -   If not, it will fall back to the existing `switch` statement to create a hardcoded game instance (`QuizClashGame`, etc.).

- [✅] **Implement Storage for Game Configurations:**
  -   **Objective:** Decide where to store the user-created Game Configuration JSON files.
  -   **Options:**
    -   **File System:** Store them as `.json` files in a new directory like `Server/src/game/configurations/`. (Simpler to start).
    -   **Database:** Use a NoSQL database like MongoDB to store the game configurations. (More scalable).
  -   **Action:** Implement the chosen storage solution.

- [✅] **Create a Game Configuration API:**
  -   **Objective:** Create a new set of RESTful API endpoints for managing game configurations.
  -   **Endpoints:**
    -   `GET /api/game-configs`: List all available game configurations.
    -   `GET /api/game-configs/:gameId`: Get a specific game configuration.
    -   `POST /api/game-configs`: Create a new game configuration (this is what the UI builder will call).
    -   `PUT /api/game-configs/:gameId`: Update an existing game configuration.
    -   `DELETE /api/game-configs/:gameId`: Delete a game configuration.

---

## III. Frontend Changes

The frontend requires a new "Game Creator" section and a refactoring of the game-playing views to be dynamic.

- [✅] **Update `GameContainer.tsx` to be Dual-System Aware:**
  -   **Objective:** Modify the `GameContainer` to render both old and new game types.
  -   **Action:** `GameContainer.tsx` will check if the current `gameId` is for a config-driven game (e.g., by checking a flag in the `gameStore` that the backend provides).
    -   If it's a new game, it will render the `DynamicViewRenderer` component.
    -   If it's an old game, it will fall back to the existing `switch` statement to render the hardcoded game view (`QuizClashHostView`, etc.).

- [✅] **Create a `DynamicViewRenderer` Component:**
  -   **Objective:** This component is the heart of the dynamic UI. It takes a UI configuration object and renders the corresponding React components.
  -   **Action:**
    -   Create `DynamicViewRenderer.tsx`.
    -   It will receive a `uiConfig` prop (e.g., the `ui.states.VOTING.host` object from the Game Configuration).
    -   It will parse this object and map the component names (e.g., `"CountdownTimer"`, `"PlayerStatusGrid"`) to actual imported React components.
    -   It must be able to render components with the properties (props) defined in the config.

- [✅] **Create a Component Registry:**
  -   **Objective:** To make the `DynamicViewRenderer` aware of the available reusable components.
  -   **Action:** Create a mapping object or service that maps string names to component imports.
    -   `import { CountdownTimer } from '../gameplay/CountdownTimer';`
    -   `const ComponentRegistry = { 'CountdownTimer': CountdownTimer, /* ...other components */ };`
    -   The `DynamicViewRenderer` will use this registry to find and render the correct components.

- [ ] **Develop the Game Creation UI:**
  -   **Objective:** Build the user-facing interface for creating and editing games. This will be a new major section of the application.
  -   **Sub-Modules:**
    -   [✅] **Metadata Editor:** Simple forms for `title`, `description`, etc.
    -   [✅] **State Machine Editor:** A visual tool (or at least a structured form) to define states, actions, and the transitions between them.
    -   [✅] **UI Builder (The "Drag and Drop" part):**
      -   This is the most complex UI task. Consider using a library like `react-beautiful-dnd` or a more advanced canvas-based solution.
      -   **Component Palette:** Display a list of all available reusable components from the `ComponentRegistry`.
      -   **Canvas:** A drop area representing the Host screen or Player screen for a specific game state.
      -   **Property Inspector:** When a component is selected on the canvas, show a panel where the user can edit its properties (e.g., button text, timer duration, which `action` a button should trigger).
      -   **Output:** The final output of this entire UI builder is the Game Configuration JSON object.

- [✅] **Update Lobby/Game Selection:**
  -   **Objective:** The lobby page should display games from both the old and new systems.
  -   **Action:** Modify `LobbyPage.tsx` to fetch the list of games from `GET /api/game-configs` and merge it with the existing hardcoded list of games. This allows hosts to choose any game, old or new.

---

## IV. Validation and Migration Strategy

This phase is critical for verifying the new system's correctness and planning a full migration.

- [ ] **Create Configurations for Existing Games:**
  -   **Objective:** As a proof-of-concept, manually create configuration files (`QuizClash.json`, `FakeNews.json`) that replicate the logic and UI of the existing, hardcoded games.
  -   **Action:** Store these test configurations in the new storage system (`Server/src/game/configurations/`).

- [ ] **Test Config-Driven Games:**
  -   **Objective:** Ensure the config-driven versions of existing games run correctly using the new engine.
  -   **Action:** Use the updated `GameFactory` and `GameContainer` to launch and play the config-based versions of QuizClash and FakeNews.

- [ ] **Compare and Verify:**
  -   **Objective:** Guarantee that the new system is functionally identical to the old one.
  -   **Action:** Play the original hardcoded games and the new config-driven versions side-by-side. Document any discrepancies in game logic, state management, or UI rendering. Fix any issues until they behave identically.

- [ ] **Plan for Final Migration:**
  -   **Objective:** Once the new system is proven to be stable and robust, plan the final switch-over.
  -   **Action:** Once validated, the old hardcoded game classes (`QuizClashGame.ts`, etc.) and frontend views can be removed. The logic in `GameFactory.ts` and `GameContainer.tsx` can then be simplified to remove the fallback cases, leaving only the dynamic, config-driven system.
