PartyHub: Backend Detailed Design
1. Project Structure
A modular structure will be used to separate concerns, making the codebase easier to navigate and maintain.
Generated code
/partyhub-backend
|
├── src/
│   ├── api/
│   │   ├── room.controller.ts   // Handles HTTP request logic for rooms
│   │   └── room.routes.ts       // Defines Express routes (e.g., POST /api/rooms)
│   │
│   ├── core/
│   │   ├── SocketManager.ts     // Central class to manage all Socket.IO connections and events
│   │   └── RedisClient.ts       // (Optional but recommended) Wrapper for Redis connection
│   │
│   ├── game/
│   │   ├── games/               // Directory for all individual game logic
│   │   │   ├── QuizClashGame.ts
│   │   │   └── FibFindersGame.ts
│   │   ├── GameManager.ts       // Manages the lifecycle of a single game in a room
│   │   ├── GameFactory.ts       // Creates instances of specific games
│   │   └── BaseGame.ts          // Abstract base class that all games must implement
│   │
│   ├── room/
│   │   ├── RoomManager.ts       // Manages the collection of all active rooms
│   │   └── Room.ts              // Class representing a single game room
│   │
│   ├── types/
│   │   ├── enums.ts             // GameState, PlayerStatus etc.
│   │   └── interfaces.ts        // Player, GameState, API Payloads etc.
│   │
│   ├── utils/
│   │   └── codeGenerator.ts     // Generates unique, human-readable room codes
│   │
│   ├── app.ts                   // Configures and wires up Express, Socket.IO, and routes
│   └── server.ts                // The main entry point, starts the HTTP server
│
├── nodemon.json
├── package.json
└── tsconfig.json


2. Main Classes and Responsibilities
RoomManager.ts (Singleton)
Manages the collection of all active rooms on the server.
Properties:
private rooms: Map<string, Room>: Stores all active Room instances, keyed by roomCode.


Methods:
createRoom(hostSocket: Socket): Room: Creates a new Room instance, generates a unique code, adds it to the rooms map, and returns the new Room object.
getRoom(roomCode: string): Room | undefined: Retrieves a room by its code.
removeRoom(roomCode: string): void: Destroys a room and cleans up resources when it's empty.


Room.ts
Represents a single game room with its players and state.
Properties:
roomCode: string: The unique identifier for the room.
hostId: string: The socket.id of the host player.
players: Map<string, Player>: Stores Player objects, keyed by socket.id.
state: RoomState: An enum (LOBBY, IN_GAME, FINISHED).
gameManager: GameManager: An instance to manage the currently active game.
io: Server: A reference to the main Socket.IO server instance for broadcasting.


Methods:
addPlayer(socket: Socket, nickname: string): void: Adds a new player to the players map. Sets the first player as host. Broadcasts room:update to all clients in the room.
removePlayer(socketId: string): void: Removes a player. If the host leaves, it can either end the game or assign a new host. Broadcasts room:update.
startGame(gameId: string): void: Changes the room state to IN_GAME and instructs its gameManager to start the specified game.
broadcast(event: string, payload: any): void: Helper to emit a message to every socket in the room.


GameManager.ts
Manages the lifecycle of a game within a single room. It acts as the bridge between the Room and the specific BaseGame implementation.
Properties:
private currentGame: BaseGame | null: Holds the instance of the currently running game (e.g., QuizClashGame).
private players: Map<string, Player>: A reference to the players in the room.
private broadcast: (event: string, payload: any) => void: A callback function provided by the Room to emit events.


Methods:
startGame(gameId: string): void: Uses the GameFactory to create an instance of the chosen game. Calls the game's start() method.
handlePlayerAction(playerId: string, action: any): void: Forwards the action from the player's socket to the currentGame.handlePlayerAction() method.
endGame(): void: Cleans up the current game and informs the Room.


BaseGame.ts (Abstract Class)
Defines the contract that every mini-game must follow. This is the key to our extensible, plugin-like architecture.
Generated typescript
     // src/game/BaseGame.ts
import { Player, GameState } from '../types/interfaces';

export abstract class BaseGame {
  protected players: Map<string, Player>;
  protected gameState: GameState;
  protected broadcast: (payload: any) => void; // Simplified broadcast

  constructor(players: Map<string, Player>, broadcastCallback: (payload: any) => void) {
    this.players = players;
    this.broadcast = broadcastCallback;
    this.gameState = { /* initial state */ };
  }

  // Method to start the game or a new round
  public abstract start(): void;

  // Method to process an action from a single player
  public abstract handlePlayerAction(playerId: string, action: any): void;

  // Method to get the current state for rendering on clients
  protected getSanitizedGameState(): any {
    // Logic to strip server-side secret data before sending to clients
    return this.gameState;
  }
}
   
IGNORE_WHEN_COPYING_START
content_copy download
Use code with caution. TypeScript
IGNORE_WHEN_COPYING_END

3. API Definitions
The backend exposes two types of APIs: a REST API for initial actions and a WebSocket API for real-time gameplay.
3.1 REST API (Express)
Handled by room.routes.ts and room.controller.ts.
POST /api/rooms
Purpose: Create a new game room.
Request Body: {} (empty)
Response:
Generated json
      {
  "roomCode": "WXYZ",
  "hostId": "socket_id_of_the_creator"
}
   
 IGNORE_WHEN_COPYING_START
 content_copy download
 Use code with caution. Json
IGNORE_WHEN_COPYING_END
Action: Triggers RoomManager.createRoom().


3.2 WebSocket API (Socket.IO)
Managed by SocketManager.ts. This is the primary communication channel.
Client-to-Server Events:
room:join
Payload: { roomCode: string, nickname: string }
Action: The server calls RoomManager.getRoom(roomCode) and then room.addPlayer().


game:start
Payload: { gameId: string } (e.g., quizclash, fibfinders)
Action: Can only be emitted by the host. The server calls room.startGame(gameId).


player:action
Payload: { action: any } (The structure of action is defined by the specific game being played).
Action: The server finds the player's room and calls room.gameManager.handlePlayerAction().


Server-to-Client Events:
room:update
Purpose: Sent whenever the lobby changes (player joins/leaves).
Payload: { roomCode: string, hostId: string, players: Player[] }


game:state_update
Purpose: The single most important event. It is broadcast whenever the game state changes. The frontend will be architected to simply re-render based on the content of this payload.
Payload: A GameState object specific to the current game. For QuizClash, this might look like:
Generated json
      {
  "gameId": "quizclash",
  "state": "ASKING_QUESTION" | "REVEALING_ANSWERS",
  "question": "What is 2+2?", // Sent to host
  "answers": ["3", "4", "5"],  // Sent to host
  "timer": 15,
  // Private data is stripped before sending to players
  "leaderboard": [{ "nickname": "Alice", "score": 100 }]
}
   
 IGNORE_WHEN_COPYING_START
 content_copy download
 Use code with caution. Json
IGNORE_WHEN_COPYING_END


error
Purpose: Sent to a single client when an invalid action is attempted.
Payload: { message: string } (e.g., "Room not found", "Not your turn").



4. Putting It All Together: A Request Lifecycle
Scenario: A player answers a question in QuizClash.
A player taps an answer on their phone. The React frontend calls socket.emit('player:action', { answerIndex: 2 });.
The SocketManager on the server receives the player:action event from that player's socket.
It looks up which Room the player (socket.id) belongs to.
It calls the handlePlayerAction method on that Room's GameManager instance, passing the player's ID and the action payload.
The GameManager forwards the call to the handlePlayerAction method of its currentGame instance, which is QuizClashGame.
QuizClashGame's logic runs: it validates the answer, updates the internal gameState (e.g., records the player's answer and score), and checks if the round is over.
QuizClashGame then calls its this.broadcast(this.getSanitizedGameState()) method.
This broadcast callback ultimately uses io.to(roomCode).emit('game:state_update', newGameState) to send the updated, sanitized state to every client in the room.
All frontend clients (host and players) receive the new state and re-render their views accordingly, ensuring everyone is in sync.

