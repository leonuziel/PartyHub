Here is a checklist for the card game "War", based on Phase 1 of the new game checklist.

### Phase 1: High Concept

*   **Game Name:** War
*   **Genre:** Card Game, Game of Chance.
*   **Player Count:** Typically 2 players, although it can be adapted for more.
*   **Short Description:** A simple card game where players simultaneously reveal a card, and the player with the higher-ranking card wins both. When the cards are of equal rank, the players enter a "War" to determine the winner of the round. The ultimate goal is to win all the cards in the deck.
*   **Target Audience:** Due to its reliance on luck rather than skill, War is primarily considered a children's game, suitable for families.
*   **Core Loop:**
    1.  Players each turn over the top card of their face-down stack.
    2.  The player with the card of a higher value wins the round and collects both cards, adding them to the bottom of their stack.
    3.  In the event of a tie, a "War" is initiated.
    4.  During a "War", each player places three cards face-down and then a fourth card face-up.
    5.  The player with the higher-ranking face-up card wins all the cards from that round.
    6.  The game concludes when one player successfully collects all the cards.



### Phase 2: Define the In-Game State Machine

The state machine for "War" dictates the game's flow after it begins.

*   **States:**
    *   `Instructions`: The initial state where players are shown the rules of War. The host can start the game from here.
    *   `RoundStart`: The beginning of a standard turn. The UI prompts players to play a card.
    *   `CardsRevealed`: The state after both players have played their card. The cards are displayed, and the server evaluates the winner.
    *   `WarDeclare`: The state entered if the revealed cards are of the same rank. It signals that a "War" sequence is about to begin.
    *   `WarInProgress`: The state where face-down cards for the "War" have been placed, and players are prompted to play their final face-up card.
    *   `RoundEnd`: The state where a winner for the turn (or war) is announced, and the card counts are visibly updated.
    *   `GameEnd`: The final state reached when one player has collected all the cards, declaring them the winner.

*   **Events (Transitions):**
    *   `hostProceedsFromInstructions`: (Host action) Moves the game from `Instructions` -> `RoundStart`.
    *   `playersPlayCard`: (Player action) Moves the game from `RoundStart` -> `CardsRevealed`.
    *   `tieOccurs`: (Server logic) Moves the game from `CardsRevealed` -> `WarDeclare`.
    *   `startWar`: (Server logic) Automatically moves the game from `WarDeclare` -> `WarInProgress` after a brief delay.
    *   `playersPlayWarCard`: (Player action) Moves the game from `WarInProgress` -> `CardsRevealed`.
    *   `winnerDetermined`: (Server logic) Moves the game from `CardsRevealed` -> `RoundEnd`.
    *   `startNextRound`: (Server/Host action) Moves the game from `RoundEnd` -> `RoundStart`.
    *   `playerHasAllCards`: (Server logic) Moves the game from `RoundEnd` -> `GameEnd`.

### phase 3: Define the Data Models and Events

*   **Backend Data (Source of Truth):**
    *   `playerDecks`: An array of card objects for each player, representing their current hand in the correct order. Example: `{'playerA': ['AH', '7C', 'JD', ...], 'playerB': ['KS', '2D', '8H', ...]}`.
    *   `cardsInPot`: An array holding the cards currently being contested in the middle.
    *   `gameState`: The current state from the state machine (e.g., `RoundStart`).

*   **Sanitized Public Data (Broadcast to all players):**
    *   `playerCardCounts`: The number of cards each player holds. Example: `{'playerA': 26, 'playerB': 26}`.
    *   `revealedCards`: The cards most recently played face-up by each player. Example: `{'playerA': 'AH', 'playerB': 'KS'}`.
    *   `currentGameState`: The active game state, so the UI can update accordingly.

*   **Event Data (Bidirectional):**
    *   *Client-to-Server:* `{'event': 'playTopCard'}`. Since the action is always playing the top card, no additional payload is needed.
    *   *Server-to-Client (Global):* `{'event': 'gameStateUpdate', 'payload': {'gameState': 'RoundEnd', 'revealedCards': {'playerA': '8H', 'playerB': '5S'}, 'roundWinner': 'playerA', 'potSize': 2, 'playerCardCounts': {'playerA': 27, 'playerB': 25}}}`. This single event can update the entire UI for all players after a turn.
    *   *Server-to-Client (Global):* `{'event': 'warDeclared', 'payload': {'gameState': 'WarDeclare', 'revealedCards': {'playerA': 'JH', 'playerB': 'JS'}}}`.
    *   *Server-to-Client (Global):* `{'event': 'gameOver', 'payload': {'winner': 'playerB'}}`.

### phase 4: Create UI/UX Mockups

## 1. State: `Instructions`

This is the pre-game screen where players gather after joining the lobby.

*   **Objective:** Ensure players understand the rules before the game begins and provide a clear starting point for the host.

*   **Layout:** A clean, static screen with a central focus on the rules.
    *   **Header:** "Game: War"
    *   **Main Content Area:** A framed box with a title and scrollable text.
    *   **Player List:** A sidebar or a section at the bottom listing the players currently in the game.
    *   **Footer:** Action buttons.

*   **UI Components & Interactions:**

    *   **Host View:**
        *   **Rules Box:**
            *   Title: "How to Play"
            *   Content:
                *   Objective: Be the last player with cards.
                *   Setup: The deck is split evenly between both players.
                *   Gameplay: Each turn, you both play your top card. The highest card wins both cards.
                *   War (Tie): If cards are the same rank, it's a "War." You each place three cards face-down, then one face-up. The winner of this face-off takes all 10 cards.
        *   **Player List:**
            *   "Player A (Host)"
            *   "Player B"
        *   **Action Button (Footer):**
            *   A large, green, active button labeled **"Start Game"**.
            *   *Interaction:* Clicking this button sends the `hostProceedsFromInstructions` event and transitions all players to the `RoundStart` state.

    *   **Player View:**
        *   The Rules Box and Player List are identical to the host's view.
        *   **Action Button (Footer):**
            *   A grayed-out, disabled button or static text: **"Waiting for Host to Start..."**
            *   *Interaction:* No action can be taken. The player simply waits.

---

## 2. State: `InProgress / RoundStart / RoundEnd`

This is the main game screen where 99% of the game takes place. It's dynamic and updates frequently.

*   **Objective:** Provide a clear and intuitive interface for the core game loop: playing a card, seeing the result, and tracking progress.

*   **Layout:** A classic top-vs-bottom layout for a two-player card game.
    *   **Opponent's Area (Top Third):** Displays the opponent's status.
    *   **Table/Action Area (Middle Third):** Where cards are played and results are shown.
    *   **Player's Area (Bottom Third):** The player's status and primary interaction zone.

*   **UI Components & Interactions:**

    *   **Opponent's Area (Top):**
        *   **Username:** "Player A"
        *   **Card Count:** A card icon followed by a number (e.g., "Cards: 26"). This number updates at the end of each round.
        *   **Deck:** A visual of a single face-down card representing their deck. This is purely visual.
        *   **Played Card Slot:** An empty outline where their card will appear.

    *   **Player's Area (Bottom):**
        *   **Username:** "Player B (You)"
        *   **Card Count:** "Cards: 26"
        *   **Deck:** A large, clickable image of a face-down card. This is the main Call to Action (CTA).
            *   *Interaction (`RoundStart`):* The deck glows or has a "Play Card" label. Hovering over it makes it larger. Clicking it triggers the `playTopCard` event, and the deck becomes temporarily disabled.
            *   *Interaction (`RoundEnd`):* The deck is disabled while results are shown, then becomes active again for the next round.

    *   **Table Area (Center):**
        *   **Status Text:** A text element that displays the current game state or result.
            *   `RoundStart`: "Play your card!"
            *   `CardsRevealed`: "Player A wins the round!"
            *   `WarDeclare`: "It's a tie! WAR!"
        *   **Animation/Card Slots:**
            1.  **Play:** When a player clicks their deck, a card animates from their deck to their designated slot in the center.
            2.  **Reveal:** The cards flip over simultaneously. A brief highlight (e.g., green glow) appears on the winning card.
            3.  **Collect:** Both cards animate from the center to the winner's card count area at the top or bottom of the screen. The count text then visibly ticks up.

---

## 3. State: `WarDeclare / WarInProgress`

This is a visually distinct variation of the `InProgress` state.

*   **Objective:** To create drama and clearly communicate the special rules of the "War" sequence.

*   **Layout:** Same as `InProgress`, but the center "Table Area" is temporarily modified.

*   **UI Components & Interactions:**

    1.  **Trigger:** The `WarDeclare` event is received.
    2.  **Initial Animation:**
        *   A large, dramatic banner animates across the center of the screen: **"WAR!"**
        *   The tied cards remain in the center.
        *   An animation shows three cards flying out from each player's deck and landing face-down on the table. The card counts for each player decrease by 4.
    3.  **Updated View (`WarInProgress`):**
        *   **Table Area:** Now contains the original two tied cards, plus three face-down cards for each player.
        *   **Status Text:** "Place your final card to decide the War!"
        *   **Player's Deck (CTA):** The player's deck becomes active again, prompting them to click.
    4.  **War Resolution:**
        *   Players click their decks.
        *   A final face-up card animates into the center for each player.
        *   The winning card is highlighted.
        *   A dramatic animation shows the *entire pot* of 10 cards flying to the winner's count.
        *   The UI then reverts to the standard `InProgress` view for the next round.

---

## 4. State: `GameEnd`

This is the final screen that concludes the game.

*   **Objective:** Clearly announce the winner and provide options for what to do next.

*   **Layout:** A modal pop-up that overlays a blurred/darkened version of the final game board. This gives it focus and a sense of finality.

*   **UI Components & Interactions:**

    *   **Modal Content:**
        *   **Main Title:** A large, celebratory (or commiseratory) title. This can be personalized:
            *   If the player won: **"VICTORY!"**
            *   If the player lost: **"DEFEAT!"**
        *   **Sub-Title:** "You have collected all the cards!" or "Player A has collected all the cards."
        *   **(Optional) Visuals:** Confetti animation for a win, or a simple graphic for a loss.
    *   **Action Buttons:**
        *   **"Play Again"**: A primary button. Sends an event to the server to signal readiness for a rematch.
        *   **"Return to Lobby"**: A secondary button. Exits the game instance and returns the player to the main application menu or lobby.