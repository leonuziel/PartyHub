# Product Requirements Prompt (PRP) for PartyHub

## Project Overview

PartyHub is a real-time, interactive social gaming platform. The architecture is designed to support a host (on a large screen) and multiple players (on mobile phones) interacting in a shared game room.

---

## **Appendix: Project Context**

### Project Structure

#### Backend (`/Server`)
```
/Server
|
├── src/
│   ├── app.ts
│   ├── core/
│   │   └── SocketManager.ts
│   ├── game/
│   │   ├── BaseGame.ts
│   │   ├── GameFactory.ts
│   │   ├── GameManager.ts
│   │   └── games/
│   │       ├── cardGames/
│   │       │   ├── cards.ts
│   │       │   └── CardsWarGame.ts
│   │       ├── FakeNewsGame.ts
│   │       ├── QuizClashGame.ts
│   │       └── quizclash_questions.json
│   ├── room/
│   │   ├── Room.ts
│   │   └── RoomManager.ts
│   ├── routes/
│   │   └── debug.ts
│   ├── server.ts
│   ├── types/
│   │   ├── enums.ts
│   │   └── interfaces.ts
│   └── utils/
│       └── codeGenerator.ts
```

#### Frontend (`/client`)
```
/client
|
├── src/
│   ├── App.tsx
│   ├── components/
│   │   ├── cards/
│   │   ├── common/
│   │   ├── controls/
│   │   ├── display/
│   │   ├── gameplay/
│   │   └── layout/
│   ├── game/
│   │   ├── CardsWar/
│   │   ├── FakeNewsGame/
│   │   ├── QuizClash/
│   │   └── GameContainer.tsx
│   ├── hooks/
│   │   └── usePlayerRole.ts
│   ├── pages/
│   ├── services/
│   │   └── socketService.ts
│   ├── store/
│   └── types/
```

#### Docs (`/Docs`)
```
/Docs
|
├── adding a game checklist.txt
├── Architecture.txt
├── design_system.txt
├── game ideas.txt
├── Games/
│   └── QuizClash.txt
├── PRD.txt
├── Requirements.txt
├── templates/
│   └── prp_template.txt
└── UX/
    ├── CardsWar.txt
    ├── fakeNews.txt
    ├── mainScreens.txt
    └── quizClash.txt
```

### Design & Architecture Summaries

#### 1. Overall Architecture Summary

The system uses a client-server model with a Node.js/Express/Socket.IO backend and a React/TypeScript frontend. The backend manages game rooms, player state, and real-time communication. The frontend is a single-page application that renders different views for the host and players. State synchronization is achieved through `game:state_update` events broadcast from the server.

#### 2. Backend Design Summary

- **Room Management**: `RoomManager` manages all `Room` instances. A `Room` contains players, state (lobby, in-game, finished), and a `GameManager`.
- **Game Logic**: `GameManager` manages the lifecycle of a game within a room. It uses a `GameFactory` to create specific game instances (e.g., `QuizClashGame`, `FakeNewsGame`, `CardsWarGame`) that extend an abstract `BaseGame` class. This makes adding new games modular.
- **Communication**: A REST API is exposed via Express for debugging purposes under `/routes/debug.ts`. All other real-time communication happens via a Socket.IO `SocketManager`. The primary event is `game:state_update`, which sends the complete, sanitized game state to all clients.

#### 3. Frontend Design Summary

- **State Management**: Zustand is used for global state, split into multiple stores within the `/store` directory.
- **Component Structure**: The UI is divided into pages (`/pages`). The `GamePage` contains a `GameContainer` that dynamically renders the correct game view (e.g., `QuizClashHostView`, `FakeNewsPlayerView`) based on the `gameId` from the `gameStore` and the user's role (host or player). Reusable components are located in `/components`.
- **Communication**: `services/socketService.ts` encapsulates all Socket.IO logic. It listens for server events and updates the Zustand stores. UI components do not interact with the socket directly; they read from the stores and call methods on the `socketService` to send actions to the server.

#### 4. Design System Summary

- **Color Palette**: A dual-layer system. The "Platform" layer uses a modern dark theme with deep purples/blues (`#12101F`, `#1C192B`) and a vibrant purple accent (`#8A2BE2`). Each "Game" layer has its own unique, energetic palette.
- **Typography**: The platform uses 'Inter' for clean, modern UI text. Games use more expressive, thematic fonts like 'Bangers' and 'Luckiest Guy'.
- **Spacing**: Uses a base unit of 1rem (16px) for consistent margins, padding, and gaps.
- **Implementation**: All design tokens are defined as CSS Custom Properties in `index.css` for global consistency.

#### 5. Sonic System Summary
- **Platform Sounds**: Subtle, clean, and functional UI sounds (clicks, notifications) to provide feedback without being intrusive.
- **Game Sounds**: Each game has a unique, energetic soundtrack and memorable sound effects (stingers for correct/wrong answers, timers, etc.) to enhance the "party" feel. The platform has a main audio jingle and a universal "achievement unlocked" sound.

#### 6. Voice & Tone Summary
- **Platform Voice**: Clear, concise, and helpful (like a "Concierge"). Used for system messages, settings, and menus.
- **Game Voice**: Witty, energetic, and playful (like a "Host"). Used for in-game instructions, questions, and results to entertain players.

### Frontend Component Summary (`client/src/components/`)

#### Common (`/common`)
- `DebugPanel.tsx`: A panel for displaying debug information.
- `Modal.tsx`: A modal dialog that can be displayed over the main content.
- `Spinner.tsx`: A loading spinner to indicate that content is being loaded.

#### Controls (`/controls`)
- `ActionButton.tsx`: A primary button for main user actions.
- `AnswerGrid.tsx`: A grid of possible answers for a question.
- `Button.tsx`: A standard, reusable button component.
- `GameCard.tsx`: A card used to display a game in a list.
- `TextAreaWithCounter.tsx`: A text area with a character counter.
- `VotingOptions.tsx`: Displays options for voting.

#### Display (`/display`)
- `AnswerResult.tsx`: Displays the result of an answer.
- `AwardDisplay.tsx`: Displays any awards a player has received.
- `GameBranding.tsx`: A component to display the branding of the current game.
- `GameTitle.tsx`: A component for displaying the title of the game.
- `Leaderboard.tsx`: Displays the game's leaderboard.
- `PlayerAvatar.tsx`: Displays a player's avatar.
- `PlayerCard.tsx`: A card displaying a player's information.
- `PlayerInfo.tsx`: A component to display information about a player.
- `PlayerStatusContainer.tsx`: A container for the status of all players.
- `PlayerStatusGrid.tsx`: A grid displaying the status of all players.
- `Podium.tsx`: A component to display the top players at the end of a game.
- `PodiumList.tsx`: A list of players on the podium.
- `QuestionDisplay.tsx`: Displays a question.
- `QuestionHeader.tsx`: The header for a question.
- `RankDisplay.tsx`: Displays a player's rank.
- `RankUpdate.tsx`: Displays an update to a player's rank.
- `ResultsList.tsx`: A list of results.
- `SpecialAwards.tsx`: Displays any special awards.
- `WinnerDisplay.tsx`: Displays the winner of the game.

#### Gameplay (`/gameplay`)
- `CountdownTimer.tsx`: A visual timer that counts down from a specified time.

#### Layout (`/layout`)
- `CenteredMessage.tsx`: A component to display a message centered on the screen.
- `HostFrame.tsx`: A container for the host's view.
- `HostViewContainer.tsx`: A container for the main content of the host's view.
- `PlayArea.tsx`: The main area where the game is played.
- `PlayerViewContainer.tsx`: A container for the player's view.

#### Card Game Components (`client/src/components/cards/`)
- `BiddingPopup.tsx`: A popup for bidding.
- `CardFan.tsx`: A fan of cards.
- `CardSlot.tsx`: A slot for a card.
- `Deck.tsx`: A deck of cards.
- `DiscardPile.tsx`: A pile of discarded cards.
- `Hand.tsx`: A player's hand of cards.
- `LastPlayedCard.tsx`: The last card that was played.
- `Meld.tsx`: A meld of cards.
- `PlayerHandDisplay.tsx`: Displays a player's hand.
- `Scoreboard.tsx`: A scoreboard for a card game.
- `Trick.tsx`: A trick of cards.
- `TrumpIndicator.tsx`: Indicates the trump suit.

### Available Games (`client/src/game/`)

- **CardsWar**: A simple card game where players compare cards, and the higher card wins. Ties result in a "war". Contains views for both host and player.
- **FakeNewsGame**: A trivia game where players submit fake answers to a question, and then vote on what they believe is the real answer. Contains views for writing, voting, and revealing answers for both host and player.
- **QuizClash**: A multiple-choice trivia game where players answer questions as quickly as possible. Contains views for asking questions and revealing answers for both host and player.
